useState:

const [state, setState] = useState(initialState)
state: It is the value of the current state.
setState: It is the function that is used to update the state.
initialState: It is the initial value of the state.

How Does useState() Work?
The useState() hook allows you to add state to functional components in React. 
It works by:
1. Initialize State: When you call useState(initialValue), 
it creates a state variable and an updater function.
const [count, setCount] = useState(0);
2. State is Preserved Across Renders: React remembers the state value between 
re-renders of the component. 
Each time the component renders, React keeps the latest value of count.
3. State Updates with the Updater Function: When you call setCount(newValue) 
React updates the state and it re-renders the component to reflect the new state value.
<button onClick={() => setCount(count + 1)}>Increment</button>
4. Triggers Re-render: React will re-render only the component where useState
 was usedâ€”ensuring your UI updates automatically when the state changes.

When to Use useState
We should use the useState Hook when
We need a simple state management solution.
We component has state that changes over time.
The state does not require complex updates or dependencies.

Performance Considerations
Avoid Re-Rendering Issues: useState updates the state asynchronously,
which may cause unnecessary re-renders. To optimize this we can use functional 
updates for dependent state changes.
Optimize Large Component States: For complex states, 
use useReducer instead of useState to prevent unnecessary re-renders 
and improve performance.

The useEffect hook is one of the most commonly used hooks in ReactJS, 
used to handle side effects in functional components. Before hooks, 
these kinds of tasks were only possible in class components 
through lifecycle methods like componentDidMount, componentDidUpdate, 
and componentWillUnmount.

Fetching data from an API.
Setting up event listeners or subscriptions.
Manipulating the DOM directly (although React generally handles DOM manipulation for you).
Cleaning up resources when a component unmounts.
